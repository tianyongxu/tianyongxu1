一、变量：
1、变量的定义：
  变量：在程序运行过程中暂时存储信息的量；（在内存中开辟出的一个空间，暂时存储的量）
2、变量的形式：
   变量类型（八大类型+String）  变量名 = 值；1、有多种形式，可以自己方便写；2、要初始化；
   //注意：
  变量名命名的规范：只能有字母、数字、$、下划线组成，且数字不能开头；
3、八大类型+1：
  （1）bety；
  （2）short；
  （3）int；
  （4）long；定义的数后面加“L”,例如：long a = 123L；
  （5）folat；
  （6）double；
  （7）boolean；（只有两个值，“ture” “flase”）一般放在判断处；
  （8）char；字符型，用‘’来表示，与数字用+连接当成运算符，与字符串用+连接当做连接符；
  （9）String；字符串，用“”来表示，并且其他类型与字符串的连接就变成字符串类型；

4、八大类型的优先级：
  char < shot < int < long < float < double ；

5、类型转换：
  自动转换：低的优先级到高的优先级是自动转换；
  强制转换：高的优先级到低的优先级就需要强制转换；例如：int i = (int) long;

二、运算符：
  表达式=操作的数+运算符
  1.常用运算符:
  赋值运算符(=)
  算术运算符(+,-,*,/,%,自加++，自减--)
  关系运算符(<,>,>=,<=,==等,!=不等于)
  逻辑运算符(||或,&&且,!非)
  2.用什么运算符连接的式子即称为什么表达式
  3.运算符的优先级
   自加自减>括号>算术运算符->关系运算>逻辑运算符

三、控制结构：
 1、if语句：用于判断连续区间；
  基本形式：
  if（boolean类型的值）{ 
    执行语句； 
  }
 2、if嵌套语句：
  if（判断条件）{
     if（再判断）{
     }
  }
 3、多重语句 if（boolean类型的值）{
    执行语句
    }else{      //这里是不满足if里面的条件的就会进入；
       执行语句；
      }还可以再增加if进行判断；
 4、三元运算符：
   （表达式1  比较运算符  表达式2）？结果1：结果2；
     
 5、switch语句；
    switch（key）{    //其中key 自己定义，且其类型与case 后面的类型要一致，适用于点到点的判断；
       case 1：（冒号）{
       } 
       break；//break的作用就是退出switch这个语句；
       case 2：{
       }  
       break；
       default:{
       }
       break；

    }   
**注意// switch 用于等值判断；**
       if 用于区间判断；

 5、变量的作用域
 （1）作用域：指的就是变量有效范围
 （2）变量作用域分类: 局部变量、全局变量
 （3）在大括号里：定义的变量称为局部变量
 （4）在大括号外：定义的变量称为全局变量
  
 6、流程图
 （1）椭圆: 表示程序开始和结束
 （2）平形四边形: 表示输入输出
 （3）矩形: 表示代码块
 （4）菱形: 表示判断
 （5）箭头：表示关系

四、循环结构：
  循环结构分为：while循环；do..while 循环；for 循环；
  1、while语句；
   定义初始值：
   例如：int i = 初始值；
   while（循环条件（boolean值）例如：i<定义值）{
   
   循环体语句；
  自增；i++
   }
    
  2、do while语句；//先做一次再说，然后才判断；
   do{
   
   循环体语句；
   i++
   }while（boolean（控制条件 i<定义值））；

  3、for（int i = 0；i< 判断条件；i++）{
   
       循环语句；
     }

    模拟跑圈
	   Scanner input=new Scanner(System.in);
	   System.out.println("你能跑吗?(y|n)");
	   String str=input.next();
	   while(str.equals("y")){
		   System.out.println("可以跑一圈");
		   
		   System.out.println("你还可以继续跑吗?y,n");
		   str=input.next();  //y,n
	   }  


  
 4、二重循环：
   循环内部增加循环；
 例如:for
  for(int i = 0;i<array.length;i++){
      for(int j= 0;j<array.length;j++){
  
       }
    }
   例1：输出一个三角形
         *
       *   *
     *   *   *
   *   *   *   *

    首先这是一个什么样的？
    1、第一层：内循环要先输出4个空白“ ”，然后再输出1个*；
    2、换行（增加一行）；
    3、第二层：要输出3个空白“”，然后输出在输出2个**；
    4、.....
    这样就清楚了代码的方法：
    for（int i = 0;i<行数；i++）{
        for(int j =0;j<=列-行数；j++）{
         System.out.print(" ");          //这里两个for是并列的关系，所以第一个for走一个循环，
        }                                //然后接着走到第二个for，走一个循环，然后再走大循环，
        for(int k = 0;k<行数；k++）{     // 接着就是再次重复；
        System.out.print("* ");//加个空格；
        }
        System.out.println();
   
   
   while循环；
   int i = 0;
   int j = 0;

    while(第一层判断条件){
      while(第二层判断条件){
      }
    }
   等等，循环都可以相互嵌套；
**4.1 二重循环的作用**
     解决矩阵图形(表格)问题
     外层控制行，内层循环控制列

   4.2.二重循环中使用跳转语句
   注:跳转语句只作用于内层(当前)循环.（break；continue）



五、跳转语句：
  break；continue；（任何循环语句都可以使用）
  1、break使用在循环语句中（while  do ...while   for ），作用是跳出循环语句；例如这个while和for语句直接跳出；
  2、continue使用在循环语句中 （while  do ...while   for ),作用是跳出本次循环，但是继续执行后面的循环体；


六、数组（array）：
一维数组：
 1、数组的定义：
  数组是用来存储一组类型相同的数据；
 2、数组的形式：
   数组类型[] 数组名 = new 数组类型[];//可在[]中定义数组的长度，然后根据索引调用；
     数组名[i] 代表着数组第i+1个元素；
   例如： int[] name = new int[];
   数组类型[] 数组名 = {a,a,d,df,g,g,g,g};
   a 数组和变量的定义本质上没有区别；
   b 数组长度为： 数组名.length；
   c 数组具有存储意义，存储后可调用；

二维数组：
 数组类型[][] 数组名 = new 数组类型[行][列]；
 例如：int[][] ary = nrw int[][];
    1、第一个[]代表着第一层数组，第二个[]代表着第二层数组；
    2、第一层数组的长度为ary.length ,第二层数组长度为ary[].length 
 数组还可以表示成
    数组类型[][] 数组名 = {{1,2,3},{4,5,7},{6,4,3},{7,89,}}
     这就是二维数组，可以用坐标的概念理解；
     例如：数组的（0.1）为2 // 就是数组内的第一个数组中的第第二个元素：

   注意**
    二维数组一般跟双层循环连着用；




















